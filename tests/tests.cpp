#include "blake2b.hpp"
#include "blake2brandom.hpp"
#include "argon2d.hpp"
#include "aes4rrandom.hpp"
#include "aes1rrandom.hpp"
#include "aes1rhash.hpp"
#include "dataset.hpp"
#include "randomxparams.hpp"
#include "reciprocal.hpp"
#include "superscalar.hpp"
#include "interpreter.hpp"
#include "utils.hpp"

#include <cstdint>
#include <array>
#include <string>
#include <string_view>
#include <chrono>
#include <span>
#include <print>

using namespace modernRX;

static int testNo = 0;
static int skipped = 0;

template<typename FUNC>
void runTest(const std::string_view name, const bool condition, FUNC f) {
	constexpr std::string_view fmt1{ "[{:2d}] {:40s} ... {:s} ({:.3f}ms)" };
	constexpr std::string_view fmt2{ "[{:2d}] {:40s} ... {:s}" };

	if (condition) {
		const auto startT{ std::chrono::high_resolution_clock::now() };
		const auto status{ f() };
		const auto endT{ std::chrono::high_resolution_clock::now() };
		const auto elapsed{ static_cast<double>(std::chrono::duration_cast<std::chrono::nanoseconds>(endT - startT).count()) / 1'000'000.0 };

		std::println(fmt1, testNo++, name, status, elapsed);
	}
	else {
		std::println(fmt2, testNo++, name, "SKIPPED");
		skipped++;
	}
}

std::string_view testBlake2bHash();
std::string_view testBlake2bHashExtended();
std::string_view testArgon2dFillMemory();
std::string_view testAesGenerator1RFill();
std::string_view testAesGenerator4RFill();
std::string_view testblake2brandom();
std::string_view testSuperscalarGenerate();
std::string_view testReciprocal();
std::string_view testDatasetGenerate();
std::string_view testAesHash1R();
std::string_view testInterpreter();

int main() {
	runTest("Blake2b::hash", true, testBlake2bHash);
	runTest("Blake2b::hashExtended", true, testBlake2bHashExtended);
	runTest("Argon2d::fillMemory", true, testArgon2dFillMemory);
	runTest("AesGenerator1R::fill", true, testAesGenerator1RFill);
	runTest("AesGenerator4R::fill", true, testAesGenerator4RFill);
	runTest("AesHash1R", true, testAesHash1R);
	runTest("blake2brandom::get", true, testblake2brandom);
	runTest("Superscalar::generate", true, testSuperscalarGenerate);
	runTest("Reciprocal", true, testReciprocal);
	runTest("Dataset::generate", true, testDatasetGenerate);
	runTest("Interpreter::run", true, testInterpreter);
}

std::string_view testInterpreter() {
	auto key = std::bit_cast<std::array<std::byte, 13>>(std::array<char, 13>{"test key 000"});
	const auto keyspan = std::span<std::byte, 12>(key.begin(), key.begin() + 12);
	auto salt = std::bit_cast<std::array<std::byte, sizeof(Rx_Argon2d_Salt)>>(Rx_Argon2d_Salt);
	auto input = std::bit_cast<std::array<std::byte, 15>>(std::array<char, 15>{"This is a test"});
	auto expected = std::bit_cast<std::array<std::byte, 32>>(std::array<uint8_t, 32>{
		0x63, 0x91, 0x83, 0xaa, 0xe1, 0xbf, 0x4c, 0x9a, 0x35, 0x88, 0x4c, 0xb4, 0x6b, 0x09, 0xca, 0xd9,
		0x17, 0x5f, 0x04, 0xef, 0xd7, 0x68, 0x4e, 0x72, 0x62, 0xa0, 0xac, 0x1c, 0x2f, 0x0b, 0x4e, 0x3f,
	});

	std::vector<argon2d::Block> cache(Rx_Argon2d_Params.memory_blocks);
	argon2d::fillMemory(cache, keyspan, salt, Rx_Argon2d_Params);

	blake2b::Random blakeRNG{ keyspan, 0 };
	Superscalar superscalar{ blakeRNG };
	std::array<Program, 8> ssPrograms;
	for (auto i = 0; i < Rx_Superscalar_Programs_Count; i++) {
		superscalar.generate(ssPrograms[i]);
	}

	DatasetMemory memory{ generateDataset(cache, ssPrograms) };

	std::array<std::byte, 64> hash{};
	blake2b::hash(hash, stdexp::span_cast<std::byte, input.size() - 1>(input), std::span<std::byte>{});

	interpreter::Interpreter ip(memory, hash);
 	auto actual{ ip.run() };

	if (!(actual == expected)) return "FAILED#0";

	return "PASSED";
}

std::string_view testAesHash1R() {
	auto input = std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64>{
		0x2e, 0x8b, 0xf0, 0x89, 0x47, 0x3a, 0xc5, 0x4d, 0x98, 0x76, 0xc5, 0x53, 0x39, 0x1d, 0xd2, 0x37,
		0xe3, 0x75, 0x79, 0xbd, 0x74, 0x0d, 0x0a, 0xbf, 0x80, 0x73, 0x8f, 0x76, 0x78, 0x05, 0x51, 0xfa,
		0x9d, 0x01, 0x36, 0xbc, 0xfe, 0xf4, 0x39, 0x00, 0x17, 0x90, 0x54, 0x77, 0x12, 0x2d, 0x75, 0xea,
		0x8b, 0xff, 0xf5, 0xa6, 0x41, 0x0e, 0x61, 0x41, 0xdf, 0x1b, 0x12, 0x4c, 0x8d, 0x56, 0x1d, 0xb3,
	});

	std::array<std::byte, 64> actual{};
	aes::hash1R(actual, input);

	auto expected = std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64>{
		0x15, 0x6e, 0x43, 0x72, 0x89, 0xbf, 0x89, 0x19, 0xfc, 0x1e, 0x6e, 0x0d, 0xf2, 0x09, 0x93, 0x7a,
		0x58, 0x75, 0xe7, 0x91, 0x2f, 0x76, 0x4e, 0xe9, 0x7f, 0xcf, 0xb4, 0xc8, 0xf4, 0x48, 0xa0, 0x55,
		0xf8, 0xcd, 0xf2, 0xd7, 0xab, 0x41, 0x94, 0x57, 0xe2, 0x62, 0x6b, 0x58, 0x61, 0xfa, 0x6f, 0x83,
		0xc8, 0xf8, 0xc0, 0x6d, 0xd4, 0xac, 0xc1, 0xc3, 0xcd, 0x9b, 0xd0, 0xe3, 0x92, 0xa1, 0xd1, 0x08,
	});

	if (!(actual == expected)) return "FAILED#0";

	return "PASSED";
}

std::string_view testDatasetGenerate() {
	auto password = std::bit_cast<std::array<std::byte, 13>>(std::array<char, 13>{ "test key 000" });
	const auto pwspan = std::span<std::byte, 12>(password.begin(), password.begin() + 12);
	auto salt = std::bit_cast<std::array<std::byte, sizeof(Rx_Argon2d_Salt)>>(Rx_Argon2d_Salt);

	std::vector<argon2d::Block> cache(Rx_Argon2d_Params.memory_blocks);
	argon2d::fillMemory(cache, pwspan, salt, Rx_Argon2d_Params);
	blake2b::Random blakeRNG{ pwspan, 0 };

	Superscalar superscalar{ blakeRNG };
	std::array<Program, 8> ssPrograms;
	for (auto i = 0; i < Rx_Superscalar_Programs_Count; i++) {
		superscalar.generate(ssPrograms[i]);
	}


	auto dt = generateDataset(cache, ssPrograms);
	
	if (!(dt[0][0] == 0x680588a85ae222db)) return "FAILED#0";
	if (!(dt[10000000][0] == 0x7943a1f6186ffb72)) return "FAILED#1";
	if (!(dt[20000000][0] == 0x9035244d718095e1)) return "FAILED#2";
	if (!(dt[30000000][0] == 0x145a5091f7853099)) return "FAILED#3";

	return "PASSED";
}

std::string_view testReciprocal() {
	if (!(reciprocal(3) == 12297829382473034410U)) return "FAILED#0";
	if (!(reciprocal(13) == 11351842506898185609U)) return "FAILED#1";
	if (!(reciprocal(33) == 17887751829051686415U)) return "FAILED#2";
	if (!(reciprocal(65537) == 18446462603027742720U)) return "FAILED#3";
	if (!(reciprocal(15000001) == 10316166306300415204U)) return "FAILED#4";
	if (!(reciprocal(3845182035) == 10302264209224146340U)) return "FAILED#5";
	if (!(reciprocal(0xffffffff) == 9223372039002259456U)) return "FAILED#6";

	return "PASSED";
}

std::string_view testSuperscalarGenerate() {
	auto password = std::bit_cast<std::array<std::byte, 13>>(std::array<char, 13>{ "test key 000" });
	const auto pwspan = std::span<std::byte, 12>(password.begin(), password.begin() + 12);
	const auto salt = Rx_Argon2d_Salt;
	blake2b::Random gen{ pwspan, 0 };
	Superscalar superscalar{ gen };

	Program ssProg;
	superscalar.generate(ssProg);

	// first program
	if (!(ssProg.instructions[0].type() == InstructionType::IMUL_R)) return "FAILED#0"; // first
	if (!(ssProg.instructions[215].type() == InstructionType::IADD_C7)) return "FAILED#1"; // some in the middle
	if (!(ssProg.instructions[446].type() == InstructionType::ISMULH_R)) return "FAILED#2"; // last
	if (!(ssProg.instructions[447].type() == InstructionType::INVALID)) return "FAILED#3"; // follwing last
	if (!(ssProg.address_register == 4)) return "FAILED#3.1";

	// iterate to last program
	for (auto i = 1; i < Rx_Superscalar_Programs_Count; i++) {
		ssProg = Program();
		superscalar.generate(ssProg);
	}

	if (!(ssProg.instructions[0].type() == InstructionType::IMUL_R)) return "FAILED#4"; // first
	if (!(ssProg.instructions[177].type() == InstructionType::ISMULH_R)) return "FAILED#5"; // some in the middle
	if (!(ssProg.instructions[436].type() == InstructionType::IMUL_RCP)) return "FAILED#6"; // last
	if (!(ssProg.instructions[437].type() == InstructionType::INVALID)) return "FAILED#7"; // follwing last
	if (!(ssProg.address_register == 0)) return "FAILED#7.1";

	return "PASSED";
}

std::string_view testblake2brandom() {
	auto password = std::bit_cast<std::array<std::byte, 13>>(std::array<char, 13>{ "test key 000" });
	const auto pwspan = std::span<std::byte, 12>(password.begin(), password.begin() + 12);
	auto salt = Rx_Argon2d_Salt;

	blake2b::Random gen{ pwspan, 0 };
	auto expected0 = 216;

	if (!(gen.getUint8() == expected0)) return "FAILED#0";

	auto expected1 = 1645563116;

	if (!(gen.getUint32() == expected1)) return "FAILED#1";

	for (auto i = 0; i < 15; i++) gen.getUint32();

	auto expected2 = 3927737455;

	if (!(gen.getUint32() == expected2)) return "FAILED#2";

	return "PASSED";
}

std::string_view testAesGenerator1RFill() {
	using namespace aes;

	auto state = std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64> {
		0x6c, 0x19, 0x53, 0x6e, 0xb2, 0xde, 0x31, 0xb6, 0xc0, 0x06, 0x5f, 0x7f, 0x11, 0x6e, 0x86, 0xf9,
			0x60, 0xd8, 0xaf, 0x0c, 0x57, 0x21, 0x0a, 0x65, 0x84, 0xc3, 0x23, 0x7b, 0x9d, 0x06, 0x4d, 0xc7,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	});

	std::array<std::byte, 64> output;
	Random1R aes1r_random{ state };
	aes1r_random.fill(output);

	if (!(output == std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64>{
		0xfa, 0x89, 0x39, 0x7d, 0xd6, 0xca, 0x42, 0x25, 0x13, 0xae, 0xad, 0xba, 0x3f, 0x12, 0x4b, 0x55,
		0x40, 0x32, 0x4c, 0x4a, 0xd4, 0xb6, 0xdb, 0x43, 0x43, 0x94, 0x30, 0x7a, 0x17, 0xc8, 0x33, 0xab,
		0xa3, 0x30, 0x40, 0x6d, 0x94, 0x2c, 0xc6, 0xcd, 0x1d, 0x2b, 0x92, 0xa6, 0x17, 0xb1, 0x72, 0x6c,
		0x56, 0xe2, 0x8c, 0x09, 0x1f, 0x52, 0xd9, 0xd2, 0xeb, 0x2f, 0x52, 0x75, 0x37, 0xf2, 0x75, 0x2a,
	}))) return "FAILED#0";

	return "PASSED";
}


std::string_view testAesGenerator4RFill() {
	using namespace aes;

	auto state = std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64> {
		0x6c, 0x19, 0x53, 0x6e, 0xb2, 0xde, 0x31, 0xb6, 0xc0, 0x06, 0x5f, 0x7f, 0x11, 0x6e, 0x86, 0xf9,
		0x60, 0xd8, 0xaf, 0x0c, 0x57, 0x21, 0x0a, 0x65, 0x84, 0xc3, 0x23, 0x7b, 0x9d, 0x06, 0x4d, 0xc7,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	});

	std::array<std::byte, 64> output;
	aes::Random4R aes4r_random{ state };
	aes4r_random.fill(output);

	if (!(output == std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64>{
		0x75, 0x96, 0xe4, 0x22, 0xdb, 0xa5, 0x3f, 0xa5, 0xc1, 0x12, 0x39, 0x11, 0x78, 0x25, 0x68, 0x60,
		0xb4, 0x12, 0x4e, 0x33, 0xc3, 0xc1, 0xa6, 0x28, 0x5f, 0xa0, 0x51, 0xa3, 0xc0, 0xa7, 0x9a, 0xb4,
		0xc9, 0xae, 0x13, 0x20, 0x50, 0x6a, 0xb9, 0x32, 0xd5, 0xad, 0x00, 0xe6, 0x14, 0x5c, 0xd6, 0x58,
		0x55, 0x4d, 0x4c, 0x88, 0x5c, 0xe0, 0x82, 0xb2, 0x30, 0x31, 0xcd, 0x40, 0x71, 0x03, 0xe7, 0x24,
	}))) return "FAILED#0";

	return "PASSED";
}


std::string_view testArgon2dFillMemory() {
	auto password = std::bit_cast<std::array<std::byte, 13>>(std::array<char, 13>{ "test key 000" });
	const auto pwspan = std::span<std::byte, 12>(password.begin(), password.begin() + 12);
	auto salt = std::bit_cast<std::array<std::byte, sizeof(Rx_Argon2d_Salt)>>(Rx_Argon2d_Salt);

	std::vector<argon2d::Block> cache(Rx_Argon2d_Params.memory_blocks);
	argon2d::fillMemory(cache, pwspan, salt, Rx_Argon2d_Params);

	using Argon2dBlock_64 = std::array<uint64_t, 128>;
	auto b1 = std::bit_cast<Argon2dBlock_64>(cache[0]);
	auto b2 = std::bit_cast<Argon2dBlock_64>(cache[12253]);
	auto b3 = std::bit_cast<Argon2dBlock_64>(cache[262143]);

	if (!(b1[0] == 0x191e0e1d23c02186)) return "FAILED#0";
	if (!(b2[29] == 0xf1b62fe6210bf8b1)) return "FAILED#1";
	if (!(b3[127] == 0x1f47f056d05cd99b)) return "FAILED#2";

	return "PASSED";
}

std::string_view testBlake2bHashExtended() {
	auto digest_size = 1024;
	std::vector<std::byte> hash;
	hash.resize(digest_size);

	auto data = std::bit_cast<std::array<std::byte, 72>>(std::array<uint8_t, 72>{
		0x34, 0x05, 0x75, 0xf8, 0x57, 0x95, 0xc2, 0x0e, 0xd0, 0xe0, 0x7f, 0x73, 0x56, 0xa0, 0x2c, 0xf5,
		0x50, 0x18, 0x56, 0x7f, 0x6a, 0xd3, 0x4f, 0x24, 0x59, 0x0f, 0xf8, 0xf8, 0xb1, 0x2f, 0xfa, 0xaa,
		0xd9, 0x34, 0x8a, 0x30, 0x70, 0xf3, 0xf5, 0x89, 0xe4, 0xa2, 0xb4, 0x18, 0x7c, 0xd2, 0x67, 0xfc,
		0x04, 0x98, 0x08, 0x0f, 0xb1, 0xe0, 0x77, 0xc4, 0xfc, 0x22, 0x06, 0x73, 0x2d, 0x0c, 0x14, 0xb2,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	});
	argon2d::blake2b::hash(hash, data);

	auto expected = std::vector<uint8_t>{
		0x25, 0x8c, 0x44, 0x4b, 0x5b, 0xa3, 0x55, 0x6f, 0x90, 0x2b, 0xc2, 0x5f, 0xfa, 0x6f, 0x09, 0xb7,
		0x6c, 0xbc, 0x44, 0xc0, 0xb3, 0xcd, 0x09, 0x9d, 0xf4, 0xdf, 0xc9, 0xf5, 0x63, 0xc2, 0x17, 0x53,
		0xba, 0xaa, 0x24, 0xa3, 0x72, 0xb8, 0x48, 0x5b, 0xac, 0x3c, 0x79, 0xac, 0x22, 0x52, 0x0f, 0x38,
		0x5c, 0xd5, 0x43, 0x9a, 0x1b, 0x27, 0xd6, 0xfe, 0xac, 0xd3, 0x59, 0xc6, 0x92, 0xb3, 0x3e, 0x14,
		0x62, 0x11, 0xe5, 0xb1, 0x94, 0x95, 0x27, 0x23, 0xae, 0x7e, 0x3c, 0x04, 0xb2, 0x51, 0xab, 0xda,
		0xff, 0xf0, 0xe0, 0xf2, 0x4a, 0x3a, 0x7c, 0x74, 0xe0, 0x91, 0xfb, 0x94, 0x89, 0xdd, 0xbb, 0xd2,
		0x47, 0xb7, 0xd8, 0x72, 0xa4, 0x37, 0x00, 0xb6, 0x11, 0xe2, 0x62, 0xb3, 0xd6, 0x04, 0x51, 0x23,
		0x4b, 0xf5, 0xc9, 0xdb, 0x7f, 0xfc, 0x48, 0xda, 0x1f, 0x8f, 0x35, 0xf6, 0x04, 0xab, 0xb1, 0xdc,
		0x9f, 0x27, 0x42, 0x97, 0xaa, 0x7c, 0x72, 0x25, 0x62, 0xd5, 0x18, 0x3c, 0xeb, 0x74, 0x65, 0x83,
		0x72, 0x32, 0xae, 0xaa, 0x83, 0xa4, 0x7b, 0x55, 0x33, 0x31, 0x54, 0xcf, 0xd5, 0x86, 0xcf, 0x79,
		0x77, 0x4b, 0x75, 0xbe, 0xf1, 0x20, 0x52, 0x5d, 0x5d, 0x7f, 0xd7, 0x09, 0xcc, 0x42, 0xd6, 0xc0,
		0x07, 0xda, 0xac, 0x7d, 0x82, 0x06, 0xf6, 0x5f, 0x8e, 0x9d, 0x5b, 0x9a, 0x3b, 0xd5, 0x43, 0x68,
		0xc9, 0x11, 0x12, 0x07, 0xd8, 0x6a, 0xab, 0x38, 0x2a, 0x75, 0x7d, 0xfd, 0x47, 0x23, 0x57, 0x3e,
		0x55, 0x05, 0x86, 0x5b, 0x61, 0x6d, 0x08, 0x79, 0xbc, 0x47, 0x77, 0xf5, 0x2e, 0xf5, 0x04, 0xd3,
		0x0d, 0x91, 0x9e, 0x5a, 0xbd, 0xc0, 0xcb, 0x24, 0xcb, 0xeb, 0x77, 0x56, 0xea, 0xc7, 0x5a, 0x66,
		0x3b, 0x5e, 0x18, 0x01, 0xfa, 0x79, 0x9d, 0x01, 0xbf, 0xe8, 0xe2, 0x62, 0x8b, 0x4b, 0x8f, 0xa3,
		0x15, 0x11, 0xba, 0xa8, 0xe0, 0x6e, 0x38, 0x60, 0x83, 0x37, 0x27, 0xc1, 0x2b, 0xcb, 0x13, 0x1e,
		0xbf, 0x4d, 0x27, 0x93, 0x7c, 0x69, 0xdf, 0x23, 0xd8, 0x94, 0xa5, 0xaa, 0x04, 0x30, 0xe4, 0x03,
		0x92, 0x2c, 0xb9, 0xfb, 0xb3, 0x73, 0xf7, 0x22, 0x87, 0xe6, 0xe5, 0x12, 0x19, 0xfc, 0x12, 0x42,
		0xbc, 0xd2, 0x73, 0x4f, 0xa6, 0x51, 0x44, 0x8f, 0x0f, 0x31, 0x1c, 0xf2, 0x3c, 0xf3, 0xe5, 0x5a,
		0xda, 0x31, 0x0a, 0x2c, 0x4a, 0x38, 0xb7, 0x7c, 0xb9, 0x0c, 0x33, 0xf2, 0x88, 0xd7, 0x5f, 0xb2,
		0x34, 0xab, 0xb8, 0xb3, 0x25, 0x36, 0x5a, 0x66, 0x85, 0xd5, 0x0f, 0x87, 0x47, 0x42, 0x92, 0x2b,
		0x66, 0x42, 0xe0, 0xb3, 0xce, 0x76, 0x0b, 0xd5, 0xc4, 0x39, 0xe5, 0xb2, 0x28, 0x26, 0xe0, 0xd8,
		0x0c, 0x53, 0x26, 0x94, 0x4a, 0x1b, 0x35, 0xef, 0x6a, 0x1d, 0xd9, 0xa6, 0x07, 0x85, 0x5a, 0xd3,
		0xb4, 0xa7, 0x7e, 0x4e, 0x5d, 0x79, 0x1d, 0xd4, 0xbc, 0xc5, 0x2c, 0x40, 0x1a, 0x90, 0xac, 0x5f,
		0x93, 0xd1, 0x1c, 0xe3, 0x13, 0xd4, 0x4a, 0xbc, 0x41, 0x3b, 0x3e, 0x4c, 0x73, 0x94, 0xe5, 0xa8,
		0x6a, 0x31, 0xba, 0xc6, 0xd0, 0x77, 0x8f, 0xa2, 0x68, 0x0f, 0xdb, 0x0f, 0x53, 0xd6, 0x65, 0x3d,
		0x5c, 0x95, 0x6e, 0x16, 0xcf, 0x45, 0xa8, 0x3f, 0x10, 0x4c, 0xcd, 0x96, 0xaf, 0xe3, 0xe8, 0xd0,
		0x57, 0xf8, 0x5d, 0x48, 0x96, 0x3e, 0x4c, 0xbc, 0x03, 0x35, 0x18, 0x81, 0xc7, 0xc8, 0x9a, 0xf0,
		0xed, 0x8f, 0x4e, 0x0e, 0xaf, 0x91, 0x1b, 0xcd, 0xf2, 0xd3, 0x42, 0xe3, 0x76, 0x42, 0x6e, 0x77,
		0x40, 0xfe, 0x08, 0xd8, 0xd8, 0x30, 0x6a, 0x42, 0xc2, 0x15, 0x2e, 0xb8, 0xfa, 0x3a, 0xfb, 0x85,
		0x10, 0xb3, 0xa4, 0xfb, 0x39, 0x51, 0xec, 0x79, 0x4a, 0xe6, 0xd8, 0x11, 0x57, 0x81, 0xe9, 0x67,
		0x7b, 0x94, 0x43, 0xf9, 0x49, 0x42, 0x36, 0xab, 0xab, 0xc1, 0x22, 0x9b, 0x58, 0x65, 0x31, 0x02,
		0x65, 0x54, 0x0a, 0xc1, 0x0c, 0xfa, 0x1b, 0x92, 0x60, 0xe7, 0xde, 0x1c, 0x99, 0x52, 0x81, 0x4d,
		0xd2, 0x47, 0x5d, 0x05, 0x17, 0x8d, 0x48, 0x73, 0x0c, 0x3f, 0x50, 0x97, 0x19, 0x88, 0x94, 0xc3,
		0x4a, 0x0c, 0x60, 0x66, 0x87, 0xb9, 0x1b, 0x7f, 0x35, 0x06, 0x5f, 0x64, 0x7a, 0xc6, 0xd7, 0xd4,
		0xf4, 0x28, 0x9c, 0xbd, 0x86, 0xb0, 0xf3, 0x65, 0x6c, 0x2a, 0xc0, 0x9d, 0x93, 0x98, 0x64, 0xc8,
		0xa7, 0xca, 0x98, 0x48, 0x82, 0xa9, 0x56, 0x61, 0xd5, 0xc0, 0x1f, 0x05, 0xbf, 0x42, 0x11, 0x2d,
		0x66, 0x63, 0xed, 0xfd, 0xb6, 0xeb, 0x7c, 0x2e, 0x5a, 0x93, 0x8c, 0xc2, 0x4a, 0x4a, 0x01, 0x64,
		0x45, 0xa9, 0x10, 0x2f, 0xb2, 0x44, 0xd4, 0x2e, 0x11, 0x5a, 0x29, 0x16, 0xc6, 0xd9, 0x8b, 0x5e,
		0x7d, 0x79, 0xd8, 0xdc, 0x62, 0x7d, 0x15, 0x63, 0xb3, 0x20, 0xba, 0x24, 0xf6, 0x1d, 0x95, 0xcd,
		0x39, 0xa1, 0x75, 0xbb, 0xd8, 0x34, 0x40, 0x66, 0x2b, 0x42, 0x89, 0x36, 0x7e, 0x3e, 0x07, 0x04,
		0x24, 0xae, 0x6e, 0x11, 0xc8, 0xce, 0x45, 0x36, 0xe5, 0x82, 0x38, 0x40, 0xb9, 0xe5, 0x79, 0xdb,
		0x25, 0x14, 0x7b, 0xf3, 0x85, 0xaf, 0x7d, 0x6b, 0xce, 0xf4, 0xf0, 0xdf, 0x5b, 0x58, 0x64, 0xd6,
		0x1b, 0x11, 0x9a, 0xec, 0x7d, 0xe1, 0x8c, 0x48, 0x61, 0xe5, 0xb7, 0xcc, 0x36, 0x37, 0x87, 0x2f,
		0x51, 0x3c, 0x29, 0xd1, 0x21, 0xab, 0x14, 0x6f, 0x11, 0x33, 0x8a, 0xa8, 0x22, 0x9e, 0x5d, 0xa9,
		0xd3, 0x7f, 0x73, 0x09, 0xe6, 0xed, 0xf3, 0x51, 0xfc, 0xdd, 0xa1, 0x35, 0xb6, 0x54, 0x63, 0xf6,
		0x5c, 0x4c, 0x1a, 0xac, 0xc4, 0x79, 0x25, 0xec, 0xbe, 0x9b, 0x83, 0xde, 0x37, 0x4a, 0xe6, 0x5b,
		0x9f, 0x79, 0x27, 0xe7, 0xbb, 0xcc, 0xe4, 0xc5, 0x20, 0xf6, 0x45, 0xea, 0x7f, 0x21, 0xa3, 0x2e,
		0xf1, 0xb4, 0x54, 0xda, 0x1a, 0xaf, 0x52, 0x5c, 0x0f, 0x7b, 0xfe, 0x72, 0xbb, 0x2f, 0x4d, 0x3f,
		0xd7, 0xdb, 0x5d, 0xbc, 0xff, 0x4f, 0x68, 0xf8, 0x80, 0x3a, 0xb8, 0x31, 0xd0, 0x43, 0xaf, 0x4a,
		0x9f, 0xb0, 0x4f, 0xd1, 0x8d, 0x6c, 0xad, 0xbe, 0x1b, 0x61, 0xf9, 0xf7, 0x63, 0x33, 0xe2, 0xb1,
		0xd9, 0xb3, 0x41, 0xf5, 0xe2, 0x4c, 0x28, 0x98, 0x19, 0x66, 0xdb, 0x02, 0x31, 0xac, 0x8e, 0x70,
		0x83, 0x8d, 0x78, 0x9e, 0x1d, 0xe6, 0xff, 0x6c, 0xed, 0xe2, 0xad, 0xf1, 0x24, 0xc8, 0x55, 0xe2,
		0xb7, 0x26, 0x02, 0xfc, 0x19, 0x03, 0xf9, 0x96, 0xe0, 0x16, 0x83, 0xce, 0x8c, 0x5a, 0x88, 0x91,
		0x00, 0x17, 0xbf, 0xf3, 0xf6, 0x3f, 0x40, 0xb6, 0x0a, 0x58, 0x6e, 0x28, 0xf8, 0x8d, 0x15, 0xdc,
		0x87, 0xeb, 0x83, 0x39, 0x06, 0x0c, 0x14, 0xde, 0xcb, 0x96, 0xbf, 0x42, 0xe7, 0xc1, 0x99, 0x81,
		0xe0, 0x82, 0xc9, 0x9d, 0xe3, 0x39, 0x4b, 0x54, 0x22, 0xb8, 0x08, 0x0a, 0x33, 0xd1, 0xf1, 0x4b,
		0xd9, 0x91, 0xe8, 0x7a, 0x64, 0xcd, 0x21, 0x7c, 0x6e, 0xbe, 0xd7, 0xed, 0x8f, 0xc3, 0x22, 0x60,
		0x4e, 0xc6, 0x38, 0xab, 0xb9, 0x3f, 0xc7, 0x42, 0x98, 0x38, 0x19, 0x6d, 0x2e, 0x6d, 0x51, 0x98,
		0x60, 0x66, 0x38, 0x9b, 0x94, 0xc4, 0x9a, 0x6b, 0x0a, 0x63, 0xcc, 0x46, 0xd6, 0x96, 0xff, 0x4a,
		0x4a, 0xef, 0x91, 0x8e, 0xdc, 0xbb, 0x5c, 0xce, 0x53, 0x63, 0xf7, 0x3c, 0xa4, 0x71, 0x0d, 0x6a,
		0xef, 0xce, 0x88, 0x72, 0x94, 0xc0, 0x84, 0x79, 0xf3, 0x79, 0xc8, 0x18, 0x41, 0x31, 0x3e, 0x1b,
		0x6e, 0x50, 0x2a, 0xc6, 0x6e, 0x0b, 0xa8, 0x10, 0x4a, 0x3b, 0x2f, 0x53, 0x57, 0x2f, 0x1f, 0x4b,
	};

	if (!(std::equal(hash.begin(), hash.end(), expected.begin(), [](const auto v1, const auto v2) {
		return v1 == static_cast<std::byte>(v2);
	}))) return "FAILED#0";

	return "PASSED";
}

std::string_view testBlake2bHash() {
	auto data = std::bit_cast<std::array<std::byte, 3>>(std::array<char, 3>{'a', 'b', 'c'});
	std::array<std::byte, 64> hash;
	blake2b::hash(hash, data, std::span<std::byte>());

	auto expected = std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64>{
		0xBA, 0x80, 0xA5, 0x3F, 0x98, 0x1C, 0x4D, 0x0D, 0x6A, 0x27, 0x97, 0xB6, 0x9F, 0x12, 0xF6, 0xE9,
			0x4C, 0x21, 0x2F, 0x14, 0x68, 0x5A, 0xC4, 0xB7, 0x4B, 0x12, 0xBB, 0x6F, 0xDB, 0xFF, 0xA2, 0xD1,
			0x7D, 0x87, 0xC5, 0x39, 0x2A, 0xAB, 0x79, 0x2D, 0xC2, 0x52, 0xD5, 0xDE, 0x45, 0x33, 0xCC, 0x95,
			0x18, 0xD3, 0x8A, 0xA8, 0xDB, 0xF1, 0x92, 0x5A, 0xB9, 0x23, 0x86, 0xED, 0xD4, 0x00, 0x99, 0x23,
	});

	if (!(hash == expected)) return "FAILED#0";

	auto data2 = std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64>{
		0x3c, 0xaf, 0x6a, 0xf, 0x45, 0x51, 0xdc, 0xd8, 0xc4, 0x9, 0xa5, 0xd5, 0x4, 0xe0, 0x1, 0xee,
			0x10, 0x22, 0x5d, 0x78, 0xa, 0xf8, 0x56, 0xd, 0x31, 0xc5, 0x80, 0x16, 0x16, 0xe0, 0x25, 0x64,
			0x6c, 0xc, 0x0, 0x8, 0xb9, 0x16, 0x9f, 0x86, 0x31, 0x6, 0xa7, 0x72, 0x68, 0xf0, 0xc8, 0x4a, 
			0xac, 0x1d, 0x89, 0xe7, 0x9b, 0x37, 0x6b, 0x91, 0xa0, 0x7b, 0xe8, 0x42, 0xa5, 0x37, 0x71, 0x53,
	});
	auto data2c = std::bit_cast<std::array<std::byte, 64>>(data2);
	blake2b::hash(hash, data2c, std::span<std::byte>());

	expected = std::bit_cast<std::array<std::byte, 64>>(std::array<uint8_t, 64>{
		0x76, 0x19, 0x38, 0x88, 0xb7, 0x51, 0xab, 0xd1, 0x6f, 0xcc, 0xcb, 0xf2, 0xf9, 0xc7, 0x8e, 0x15,
			0xfc, 0x20, 0xc9, 0xe6, 0xab, 0x32, 0xc1, 0xa1, 0xa9, 0xb, 0x19, 0xfe, 0x14, 0x19, 0x3, 0x96,
			0xc1, 0xa0, 0xe9, 0xea, 0x21, 0x95, 0x31, 0xbf, 0xbf, 0xb1, 0x55, 0x68, 0xef, 0x3a, 0x1c, 0x58,
			0xa8, 0x1e, 0x95, 0x7a, 0x9, 0xfb, 0xad, 0x42, 0x56, 0x75, 0x7e, 0xcf, 0x1b, 0x33, 0xda, 0x49,
	});

	if (!(hash == expected)) return "FAILED#1";

	return "PASSED";
}